// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: SpaghettiCannon/clientapi/v1/clientapi.proto

package spagv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/SpaghettiCannon/gen/SpaghettiCannon/clientapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SpaghettiCannonApiServiceName is the fully-qualified name of the SpaghettiCannonApiService
	// service.
	SpaghettiCannonApiServiceName = "SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SpaghettiCannonApiServiceGetReadyzProcedure is the fully-qualified name of the
	// SpaghettiCannonApiService's GetReadyz RPC.
	SpaghettiCannonApiServiceGetReadyzProcedure = "/SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService/GetReadyz"
	// SpaghettiCannonApiServiceAddUpdateProcedure is the fully-qualified name of the
	// SpaghettiCannonApiService's AddUpdate RPC.
	SpaghettiCannonApiServiceAddUpdateProcedure = "/SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService/AddUpdate"
)

// SpaghettiCannonApiServiceClient is a client for the
// SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService service.
type SpaghettiCannonApiServiceClient interface {
	GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error)
	AddUpdate(context.Context, *connect.Request[v1.AddUpdateRequest]) (*connect.Response[v1.AddUpdateResponse], error)
}

// NewSpaghettiCannonApiServiceClient constructs a client for the
// SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSpaghettiCannonApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SpaghettiCannonApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	spaghettiCannonApiServiceMethods := v1.File_SpaghettiCannon_clientapi_v1_clientapi_proto.Services().ByName("SpaghettiCannonApiService").Methods()
	return &spaghettiCannonApiServiceClient{
		getReadyz: connect.NewClient[v1.GetReadyzRequest, v1.GetReadyzResponse](
			httpClient,
			baseURL+SpaghettiCannonApiServiceGetReadyzProcedure,
			connect.WithSchema(spaghettiCannonApiServiceMethods.ByName("GetReadyz")),
			connect.WithClientOptions(opts...),
		),
		addUpdate: connect.NewClient[v1.AddUpdateRequest, v1.AddUpdateResponse](
			httpClient,
			baseURL+SpaghettiCannonApiServiceAddUpdateProcedure,
			connect.WithSchema(spaghettiCannonApiServiceMethods.ByName("AddUpdate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// spaghettiCannonApiServiceClient implements SpaghettiCannonApiServiceClient.
type spaghettiCannonApiServiceClient struct {
	getReadyz *connect.Client[v1.GetReadyzRequest, v1.GetReadyzResponse]
	addUpdate *connect.Client[v1.AddUpdateRequest, v1.AddUpdateResponse]
}

// GetReadyz calls SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService.GetReadyz.
func (c *spaghettiCannonApiServiceClient) GetReadyz(ctx context.Context, req *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error) {
	return c.getReadyz.CallUnary(ctx, req)
}

// AddUpdate calls SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService.AddUpdate.
func (c *spaghettiCannonApiServiceClient) AddUpdate(ctx context.Context, req *connect.Request[v1.AddUpdateRequest]) (*connect.Response[v1.AddUpdateResponse], error) {
	return c.addUpdate.CallUnary(ctx, req)
}

// SpaghettiCannonApiServiceHandler is an implementation of the
// SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService service.
type SpaghettiCannonApiServiceHandler interface {
	GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error)
	AddUpdate(context.Context, *connect.Request[v1.AddUpdateRequest]) (*connect.Response[v1.AddUpdateResponse], error)
}

// NewSpaghettiCannonApiServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSpaghettiCannonApiServiceHandler(svc SpaghettiCannonApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	spaghettiCannonApiServiceMethods := v1.File_SpaghettiCannon_clientapi_v1_clientapi_proto.Services().ByName("SpaghettiCannonApiService").Methods()
	spaghettiCannonApiServiceGetReadyzHandler := connect.NewUnaryHandler(
		SpaghettiCannonApiServiceGetReadyzProcedure,
		svc.GetReadyz,
		connect.WithSchema(spaghettiCannonApiServiceMethods.ByName("GetReadyz")),
		connect.WithHandlerOptions(opts...),
	)
	spaghettiCannonApiServiceAddUpdateHandler := connect.NewUnaryHandler(
		SpaghettiCannonApiServiceAddUpdateProcedure,
		svc.AddUpdate,
		connect.WithSchema(spaghettiCannonApiServiceMethods.ByName("AddUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SpaghettiCannonApiServiceGetReadyzProcedure:
			spaghettiCannonApiServiceGetReadyzHandler.ServeHTTP(w, r)
		case SpaghettiCannonApiServiceAddUpdateProcedure:
			spaghettiCannonApiServiceAddUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSpaghettiCannonApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSpaghettiCannonApiServiceHandler struct{}

func (UnimplementedSpaghettiCannonApiServiceHandler) GetReadyz(context.Context, *connect.Request[v1.GetReadyzRequest]) (*connect.Response[v1.GetReadyzResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService.GetReadyz is not implemented"))
}

func (UnimplementedSpaghettiCannonApiServiceHandler) AddUpdate(context.Context, *connect.Request[v1.AddUpdateRequest]) (*connect.Response[v1.AddUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SpaghettiCannon.clientapi.v1.SpaghettiCannonApiService.AddUpdate is not implemented"))
}
